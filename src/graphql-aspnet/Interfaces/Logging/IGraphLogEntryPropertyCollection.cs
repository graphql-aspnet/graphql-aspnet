// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Interfaces.Logging
{
    using System.Collections.Generic;

    /// <summary>
    /// An interface describing a a collection of keyvalue pairs used in log entries generated by the
    /// runtime.
    /// </summary>
    public interface IGraphLogEntryPropertyCollection : IEnumerable<KeyValuePair<string, object>>
    {
        /// <summary>
        /// Retrieves a single property from the collection or null if not found.
        /// </summary>
        /// <param name="key">The key of the property.</param>
        /// <returns>System.Object.</returns>
        object RetrieveProperty(string key);

        /// <summary>
        /// Retrieves a single property from the collection or null if not found. If the
        /// found object cannot be explictly cast to the given type an exception will be thrown.
        /// </summary>
        /// <typeparam name="TType">The type to cast the found property value to.</typeparam>
        /// <param name="key">The key of the property.</param>
        /// <returns>System.Object.</returns>
        TType RetrieveProperty<TType>(string key);

        /// <summary>
        /// Adds the given key/value pair to the collection. This method will
        /// automatically suffix any provided key values to prevent a conflict.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <returns>The key under which the value was inserted.</returns>
        string AddProperty(string key, object value);

        /// <summary>
        /// Determines whether this property collection contains a log property with the given
        /// key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns><c>true</c> if the key is found; otherwise, <c>false</c>.</returns>
        bool ContainsKey(string key);

        /// <summary>
        /// Flattens the property list of this collection. If any entries are they themselves
        /// <see cref="IGraphLogEntryPropertyCollection"/>; those keys are unnested and prefixed
        /// with the key of this entry in the parent collection.
        /// </summary>
        /// <returns>IEnumerable&lt;KeyValuePair&lt;System.String, System.Object&gt;&gt;.</returns>
        IEnumerable<KeyValuePair<string, object>> FlattenProperties();

        /// <summary>
        /// Gets the property value with the specified key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>System.Object.</returns>
        object this[string key] { get; set; }
}
}