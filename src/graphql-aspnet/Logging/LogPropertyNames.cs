// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Logging
{
    using System;
    using GraphQL.AspNet.Schemas.TypeSystem;

    /// <summary>
    /// A collection of constants used as property names internally by the graphql runtime.
    /// </summary>
    public static class LogPropertyNames
    {
        /// <summary>
        /// An exception attached to a log entry.
        /// </summary>
        public const string EXCEPTION = "exception";

        /// <summary>
        /// The identifer assigned to all log enteries generated by a single instance of the event logger.
        /// </summary>
        public const string SCOPE_ID = "scopeId";

        /// <summary>
        /// The id of the individual log entry in question.
        /// </summary>
        public const string LOG_ENTRY_ID = "logEntryId";

        /// <summary>
        /// A standard, human-readble message attached to the log entry.
        /// </summary>
        public const string MESSAGE = "message";

        /// <summary>
        /// The <see cref="Microsoft.Extensions.Logging.EventId"/> assigned to the log entry.
        /// </summary>
        public const string EVENT_ID = "eventId";

        /// <summary>
        /// The name of the <see cref="Microsoft.Extensions.Logging.EventId"/> attached to the entry.
        /// </summary>
        public const string EVENT_NAME = "eventName";

        /// <summary>
        /// The datetime (in UTC-0) as a <see cref="DateTimeOffset"/> when the log entry was first generated.
        /// </summary>
        public const string DATE_TIME_UTC = "dateTimeUTC";

        /// <summary>
        /// The first, non-null username extracted from the first identity of the claims principal on the operation context.
        /// </summary>
        public const string USERNAME = "userName";

        /// <summary>
        /// A boolean value indicating if authentication succeeded or not.
        /// </summary>
        public const string AUTHENTICATION_SUCCESS = "authenticationSuccess";

        /// <summary>
        /// The scheme of the authentication handler that successfully authenticated the request.
        /// </summary>
        public const string AUTHENTICATION_SCHEME = "authenticationScheme";

        /// <summary>
        /// The first 300 characters of a query on an operation request.
        /// </summary>
        public const string QUERY_TEXT = "queryText";

        /// <summary>
        /// The the name of the operation on the query to execute, if supplied on the request.
        /// </summary>
        public const string QUERY_OPERATION_NAME = "queryOperationName";

        /// <summary>
        /// The .NET type name of a given schema.
        /// </summary>
        public const string SCHEMA_TYPE_NAME = "schemaType";

        /// <summary>
        /// The name of the pipeline being registered.
        /// </summary>
        public const string SCHEMA_PIPELINE_NAME = "pipelineName";

        /// <summary>
        /// The hashcode generated for a query document.
        /// </summary>
        public const string QUERY_PLAN_HASH_CODE = "queryHashCode";

        /// <summary>
        /// THe unique id assigned to the query plan when it was generated.
        /// </summary>
        public const string QUERY_PLAN_ID = "queryPlanId";

        /// <summary>
        /// The total number of operations that exist in a query plan.
        /// </summary>
        public const string QUERY_PLAN_OPERATION_COUNT = "operationCount";

        /// <summary>
        /// The calculated complexity of the query plan.
        /// </summary>
        public const string QUERY_PLAN_ESTIMATED_COMPLEXITY = "estimatedComplexity";

        /// <summary>
        /// The depth of the deepest field resolution path for any operation in a query plan.
        /// </summary>
        public const string QUERY_PLAN_MAX_DEPTH = "maxDepth";

        /// <summary>
        /// A value indicating if the query plan that was generated is in a valid and executable state.
        /// </summary>
        public const string QUERY_PLAN_IS_VALID = "isValid";

        /// <summary>
        /// The unique id assigned to an individual operation request.
        /// </summary>
        public const string OPERATION_REQUEST_ID = "operationRequestId";

        /// <summary>
        /// The unique id assigned to an individual pipele/field resolution request.
        /// </summary>
        public const string PIPELINE_REQUEST_ID = "pipelineRequestId";

        /// <summary>
        /// The full path of a field of data (e.g. [query]/hero/name).
        /// </summary>
        public const string FIELD_PATH = "path";

        /// <summary>
        /// The mode the field is being executed in (per item or batch).
        /// </summary>
        public const string FIELD_EXECUTION_MODE = "executionMode";

        /// <summary>
        /// The graph type expression of the data generated by the field.
        /// </summary>
        public const string FIELD_TYPE_EXPRESSION = "typeExpression";

        /// <summary>
        /// Indicates of the result of a field resolution returned any data or not.
        /// </summary>
        public const string FIELD_DATA_RETURNED = "hasData";

        /// <summary>
        /// Indicates if the returned result from any field pipeline request is considered
        /// valid and usable.
        /// </summary>
        public const string FIELD_RESULT_IS_VALID = "resultIsValid";

        /// <summary>
        /// The full, internal name of the controller being invoke.
        /// </summary>
        public const string CONTROLLER_TYPE_NAME = "controllerTypeName";

        /// <summary>
        /// The name of the controller action method being invoke.
        /// </summary>
        public const string ACTION_NAME = "actionName";

        /// <summary>
        /// Indicates if the invocation parameters to a controller action method
        /// passed attribute validation.
        /// </summary>
        public const string ACTION_MODEL_DATA_IS_VALID = "isValid";

        /// <summary>
        /// The expected <see cref="Type"/> of the source data item supplying a value
        /// to this action method.
        /// </summary>
        public const string ACTION_SOURCE_OBJECT_TYPE = "sourceObjectType";

        /// <summary>
        /// Indicates if the action is being invoked as an async method or not.
        /// </summary>
        public const string ACTION_IS_ASYNC = "isAsync";

        /// <summary>
        /// The <see cref="Type"/> of the response data from a controller action.
        /// </summary>
        public const string ACTION_RESULT_TYPE_NAME = "resultTypeName";

        /// <summary>
        /// The message of the captured exception.
        /// </summary>
        public const string EXCEPTION_MESSAGE = "message";

        /// <summary>
        /// The <see cref="Type"/> of the captured exception.
        /// </summary>
        public const string EXCEPTION_TYPE = "type";

        /// <summary>
        /// A full stack trace of the captured exception.
        /// </summary>
        public const string EXCEPTION_STACK_TRACE = "stackTrace";

        /// <summary>
        /// Indicates if, once completed, the operation result generated one or more error that
        /// was sent to the client.
        /// </summary>
        public const string OPERATION_RESULT_HAS_ERRORS = "hasErrors";

        /// <summary>
        /// Indicates if, once completed, the operation included data that was sent to the client.
        /// </summary>
        public const string OPERATION_RESULT_HAS_DATA = "hasData";

        /// <summary>
        /// Indicates if the security check succeeded and the user is authorized to
        /// perform the action.
        /// </summary>
        public const string SECURITY_AUTHORIZATION_STATUS = "status";

        /// <summary>
        /// A collection of messages generated during the authorization of a request.
        /// </summary>
        public const string SECURITY_MESSAGES = "messages";

        /// <summary>
        /// The number of graph types registered to a schema instance.
        /// </summary>
        public const string SCHEMA_GRAPH_TYPE_COUNT = "graphTypeCount";

        /// <summary>
        /// A comma-seperated list of operation types supported.
        /// </summary>
        public const string SCHEMA_SUPPORTED_OPERATION_TYPES = "supportedOperations";

        /// <summary>
        /// The assigned name of this schema instance. May or may not be unique.
        /// </summary>
        public const string SCHEMA_INSTANCE_NAME = "instanceName";

        /// <summary>
        /// A collection of loggable information of the graph types on the target schema.
        /// </summary>
        public const string SCHEMA_GRAPH_TYPE_COLLECTION = "graphTypes";

        /// <summary>
        /// The number of middleware components registered to a schema pipeline instance.
        /// </summary>
        public const string SCHEMA_PIPELINE_MIDDLEWARE_COUNT = "middlewareCount";

        /// <summary>
        /// A collection of names of the components registered to the pipeline for the schema.
        /// </summary>
        public const string SCHEMA_PIPELINE_MIDDLEWARE_COMPOENNTS = "middleware";

        /// <summary>
        /// The route assigned to a schema type when it was registered with ASP.NET.
        /// </summary>
        public const string SCHEMA_ROUTE_PATH = "route";

        /// <summary>
        /// The name of the graph type item, as its declared in its schema.
        /// </summary>
        public const string GRAPH_TYPE_NAME = "typeName";

        /// <summary>
        /// The <see cref="TypeKind"/> of the graph type, represented as a string.
        /// </summary>
        public const string GRAPH_TYPE_KIND = "typeKind";

        /// <summary>
        /// The name of the .NET <see cref="Type"/> associated to the graph type in the
        /// schema. May be null.
        /// </summary>
        public const string GRAPH_TYPE_TYPE_NAME = "typeType";

        /// <summary>
        /// The total number of fields mapped to the graph type. If the grpah type does not
        /// support fields (such as scalars) this property is not included.
        /// </summary>
        public const string GRAPH_TYPE_FIELD_COUNT = "fieldCount";

        /// <summary>
        /// A value indicating whether the graph type is published on introspection queries.
        /// </summary>
        public const string GRAPH_TYPE_IS_PUBLISHED = "isPublished";

        /// <summary>
        /// The name of the model state entry (usually the parameter name for the target
        /// controller name).
        /// </summary>
        public const string MODEL_ITEM_NAME = "modelItemName";

        /// <summary>
        /// The individual model item's validation state as it was determined by attribute
        /// base validation before being passed to a controller action.
        /// </summary>
        public const string MODEL_ITEM_STATE = "modelItemState";

        /// <summary>
        /// A collection of errors generated during the validation of the model item.
        /// </summary>
        public const string MODEL_ITEM_ERRORS = "errors";

        /// <summary>
        /// A collection of model items that were validated as a set during the execution of a controller action.
        /// </summary>
        public const string MODEL_ITEMS_COLLECTION = "modelItems";
    }
}