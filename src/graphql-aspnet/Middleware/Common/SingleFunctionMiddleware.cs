// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Middleware.Common
{
    using System;
    using System.Threading;
    using System.Threading.Tasks;
    using GraphQL.AspNet.Common;
    using GraphQL.AspNet.Interfaces.Execution;
    using GraphQL.AspNet.Interfaces.Middleware;

    /// <summary>
    /// An internal object for encapsulating a <see cref="Func{TResult}" /> supplied by an end user
    /// as a piece of middleware.
    /// </summary>
    /// <typeparam name="TContext">The type of context this pipeline handles.</typeparam>
    internal class SingleFunctionMiddleware<TContext> : IGraphMiddlewareComponent<TContext>
        where TContext : class, IGraphExecutionContext
    {
        private readonly Func<TContext, GraphMiddlewareInvocationDelegate<TContext>, CancellationToken, Task> _invocationFunc;

        /// <summary>
        /// Initializes a new instance of the <see cref="SingleFunctionMiddleware{TContext}"/> class.
        /// </summary>
        /// <param name="invocationFunc">The invocation function.</param>
        public SingleFunctionMiddleware(Func<TContext, GraphMiddlewareInvocationDelegate<TContext>, CancellationToken, Task> invocationFunc)
        {
            _invocationFunc = Validation.ThrowIfNullOrReturn(invocationFunc, nameof(invocationFunc));
        }

        /// <summary>
        /// Called by the runtime to invoke the middleware logic. In most cases, the middleware component should return the task
        /// generated by calling the next <see cref="T:GraphQL.AspNet.Execution.Pipelining.GraphQLRequestDelegate" /> in the request chain with the provided context.
        /// </summary>
        /// <param name="context">The context tracking state for this pipeline invocation.</param>
        /// <param name="next">The next delegate in the chain to be invoked.</param>
        /// <param name="cancelToken">The cancel token.</param>
        /// <returns>Task.</returns>
        public Task InvokeAsync(TContext context, GraphMiddlewareInvocationDelegate<TContext> next, CancellationToken cancelToken)
        {
            return _invocationFunc(context, next, cancelToken);
        }
    }
}