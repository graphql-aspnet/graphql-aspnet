// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Middleware.FieldExecution.Components
{
    using System.Threading;
    using System.Threading.Tasks;
    using GraphQL.AspNet.Common;
    using GraphQL.AspNet.Execution.Contexts;
    using GraphQL.AspNet.Interfaces.Middleware;
    using GraphQL.AspNet.Interfaces.TypeSystem;
    using GraphQL.AspNet.Security;

    /// <summary>
    /// A piece of middleware that will evaluate the security policies attached to the field on the context and ensure
    /// the user is granted access via said policies.
    /// </summary>
    /// <typeparam name="TSchema">The schema this middleware instance is registered for.</typeparam>
    public class AuthorizeFieldMiddleware<TSchema> : IGraphFieldExecutionMiddleware
        where TSchema : class, ISchema
    {
        private readonly ISchemaPipeline<TSchema, GraphFieldSecurityContext> _authPipeline;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeFieldMiddleware{TSchema}"/> class.
        /// </summary>
        /// <param name="authPipeline">The authentication pipeline.</param>
        public AuthorizeFieldMiddleware(ISchemaPipeline<TSchema, GraphFieldSecurityContext> authPipeline)
        {
            _authPipeline = Validation.ThrowIfNullOrReturn(authPipeline, nameof(authPipeline));
        }

        /// <summary>
        /// Called by the runtime to invoke the middleware logic. In most cases, the middleware component should return the task
        /// generated by calling the next delegate in the request chain with the provided context.
        /// </summary>
        /// <param name="context">The invocation request governing data in this pipeline run.</param>
        /// <param name="next">The next delegate in the chain to be invoked.</param>
        /// <param name="cancelToken">The cancel token.</param>
        /// <returns>Task.</returns>
        public async Task InvokeAsync(GraphFieldExecutionContext context, GraphMiddlewareInvocationDelegate<GraphFieldExecutionContext> next, CancellationToken cancelToken)
        {
            FieldSecurityChallengeResult result = FieldSecurityChallengeResult.Default();
            if (context.IsValid)
            {
                // execute the authorization pipeline
                var authRequest = new GraphFieldSecurityRequest(context.Request);
                var authContext = new GraphFieldSecurityContext(context, authRequest);
                await _authPipeline.InvokeAsync(authContext, cancelToken).ConfigureAwait(false);

                result = authContext.Result ?? FieldSecurityChallengeResult.Default();

                // by default, deny any stati not explicitly declared as "successful" by this component.
                if (result.Status.IsAuthorized())
                {
                    context.User = result.User;
                }
                else
                {
                    context.Messages.Critical(
                        $"Access Denied to field {context.Field.Route.Path}",
                        Constants.ErrorCodes.ACCESS_DENIED,
                        context.Request.Origin);
                }
            }

            if (!result.Status.IsAuthorized())
            {
                context.ResolvedSourceItems.AddRange(context.Request.DataSource.Items);
                context.ResolvedSourceItems.ForEach(x => x.Fail());
            }

            await next(context, cancelToken).ConfigureAwait(false);
        }
    }
}