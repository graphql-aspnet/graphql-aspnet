// *************************************************************
// project:  graphql-aspnet
// --
// repo: https://github.com/graphql-aspnet
// docs: https://graphql-aspnet.github.io
// --
// License:  MIT
// *************************************************************

namespace GraphQL.AspNet.Tests.Framework.PipelineContextBuilders
{
    using System;
    using GraphQL.AspNet.Common;
    using GraphQL.AspNet.Execution.Source;
    using GraphQL.AspNet.Controllers;
    using GraphQL.AspNet.Directives;
    using GraphQL.AspNet.Execution;
    using GraphQL.AspNet.Execution.Contexts;
    using GraphQL.AspNet.Execution.FieldResolution;
    using GraphQL.AspNet.Execution.QueryPlans.InputArguments;
    using GraphQL.AspNet.Execution.Variables;
    using GraphQL.AspNet.Interfaces.Execution;
    using GraphQL.AspNet.Interfaces.Logging;
    using GraphQL.AspNet.Interfaces.Schema;
    using GraphQL.AspNet.Interfaces.Security;
    using GraphQL.AspNet.Security;
    using GraphQL.AspNet.Interfaces.Execution.QueryPlans.DocumentParts;
    using GraphQL.AspNet.Interfaces.Execution.QueryPlans.InputArguments;
    using NSubstitute;

    /// <summary>
    /// A builder used to create inlined mocked replacements
    /// of various contained data to setup a test scenario targeting a single field resolution.
    /// </summary>
    public class FieldContextBuilder
    {
        private readonly IGraphField _graphField;
        private readonly ISchema _schema;
        private readonly IGraphFieldRequest _mockRequest;
        private readonly IGraphFieldInvocationContext _mockInvocationContext;
        private readonly IFieldDocumentPart _mockFieldDocumentPart;
        private readonly IGraphMessageCollection _messageCollection;
        private readonly IInputArgumentCollection _arguments;

        private IUserSecurityContext _securityContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="FieldContextBuilder" /> class.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <param name="userSecurityContext">The user security context.</param>
        /// <param name="graphField">The graph field.</param>
        /// <param name="schema">The schema.</param>
        /// <param name="graphMethod">The metadata describing the method/functon to be invoked by a resolver.</param>
        public FieldContextBuilder(
            IServiceProvider serviceProvider,
            IUserSecurityContext userSecurityContext,
            IGraphField graphField,
            ISchema schema,
            IGraphFieldResolverMethod graphMethod)
        {
            _schema = Validation.ThrowIfNullOrReturn(schema, nameof(schema));
            _graphField = Validation.ThrowIfNullOrReturn(graphField, nameof(graphField));
            _securityContext = Validation.ThrowIfNullOrReturn(userSecurityContext, nameof(userSecurityContext));
            _messageCollection = new GraphMessageCollection();
            _arguments = InputArgumentCollectionFactory.Create();

            this.ServiceProvider = Validation.ThrowIfNullOrReturn(serviceProvider, nameof(serviceProvider));

            Type expectedInputType = null;

            if (!Validation.IsCastable<GraphDirective>(graphMethod.Parent.ObjectType)
                && !Validation.IsCastable<GraphController>(graphMethod.Parent.ObjectType))
            {
                expectedInputType = graphMethod.Parent.ObjectType;
            }

            _mockFieldDocumentPart = Substitute.For<IFieldDocumentPart>();
            _mockFieldDocumentPart.Field.Returns(_graphField);
            _mockFieldDocumentPart.Name.Returns(_graphField.Name);
            _mockFieldDocumentPart.Alias.Returns(_graphField.Name);

            _mockInvocationContext = Substitute.For<IGraphFieldInvocationContext>();
            _mockInvocationContext.ExpectedSourceType.Returns(expectedInputType);
            _mockInvocationContext.Field.Returns(_graphField);
            _mockInvocationContext.Arguments.Returns(_arguments);
            _mockInvocationContext.Name.Returns(_graphField.Name);
            _mockInvocationContext.ChildContexts.Returns(new FieldInvocationContextCollection());
            _mockInvocationContext.Origin.Returns(SourceOrigin.None);
            _mockInvocationContext.Schema.Returns(_schema);
            _mockInvocationContext.FieldDocumentPart.Returns(_mockFieldDocumentPart);

            // fake the request for the field data
            // (normally generated by the primary query exeuction context)
            var id = Guid.NewGuid();
            _mockRequest = Substitute.For<IGraphFieldRequest>();
            _mockRequest.Id.Returns(id);
            _mockRequest.Origin.Returns(SourceOrigin.None);
            _mockRequest.Field.Returns(_graphField);
            _mockRequest.InvocationContext.Returns(_mockInvocationContext);

            this.GraphMethod = Substitute.For<IGraphFieldResolverMethod>();
            this.GraphMethod.Parent.Returns(graphMethod.Parent);
            this.GraphMethod.ObjectType.Returns(graphMethod.ObjectType);
            this.GraphMethod.ExpectedReturnType.Returns(graphMethod.ExpectedReturnType);
            this.GraphMethod.Method.Returns(graphMethod.Method);
            this.GraphMethod.IsAsyncField.Returns(graphMethod.IsAsyncField);
            this.GraphMethod.Name.Returns(graphMethod.Name);
            this.GraphMethod.InternalFullName.Returns(graphMethod.InternalFullName);
            this.GraphMethod.InternalName.Returns(graphMethod.InternalName);
            this.GraphMethod.Route.Returns(graphMethod.Route);
            this.GraphMethod.Arguments.Returns(graphMethod.Arguments);
        }

        /// <summary>
        /// Adds or replaces the source data supplied to the field request.
        /// </summary>
        /// <param name="sourceData">The source data.</param>
        /// <param name="path">An optional to mock where in the graph query the data originated.</param>
        /// <returns>MockFieldRequest.</returns>
        public FieldContextBuilder AddSourceData(object sourceData, SourcePath path = null)
        {
            path = path ?? SourcePath.None;
            var item = new FieldDataItem(_mockInvocationContext, sourceData, path);
            var dataSource = new FieldDataItemContainer(sourceData, path, item);
            _mockRequest.Data.Returns(dataSource);
            return this;
        }

        /// <summary>
        /// Adds a custom origin to the field request instead of using <see cref="SourceOrigin.None"/>.
        /// </summary>
        /// <param name="origin">The origin.</param>
        /// <returns>MockFieldExecutionContext.</returns>
        public FieldContextBuilder AddOrigin(SourceOrigin origin)
        {
            _mockRequest.Origin.Returns(origin);
            _mockInvocationContext.Origin.Returns(origin);
            return this;
        }

        /// <summary>
        /// Adds a value for a given input argument to this field. It is assumed the value will cast correctly.
        /// </summary>
        /// <param name="argumentName">Name of the input field, as declared in the schema, on the field being mocked.</param>
        /// <param name="value">A fully resolved value to use.</param>
        /// <returns>MockFieldRequest.</returns>
        public FieldContextBuilder AddInputArgument(string argumentName, object value)
        {
            var resolvedInputValue = new ResolvedInputArgumentValue(argumentName, value);
            var fieldArgument = _graphField.Arguments[argumentName];
            var inputArgument = new InputArgument(fieldArgument, resolvedInputValue, SourceOrigin.None);
            _arguments.Add(inputArgument);
            return this;
        }

        /// <summary>
        /// alters the security context to be different than that provided by the server that created this builder.
        /// </summary>
        /// <param name="securityContext">The security context.</param>
        /// <returns>MockFieldRequest.</returns>
        public FieldContextBuilder AddSecurityContext(IUserSecurityContext securityContext)
        {
            _securityContext = securityContext;
            return this;
        }

        private IGraphQLMiddlewareExecutionContext CreateFakeParentMiddlewareContext()
        {
            var queryRequest = Substitute.For<IQueryExecutionRequest>();
            var parentContext = Substitute.For<IGraphQLMiddlewareExecutionContext>();

            parentContext.QueryRequest.Returns(queryRequest);
            parentContext.ServiceProvider.Returns(this.ServiceProvider);
            parentContext.SecurityContext.Returns(_securityContext);
            parentContext.Metrics.Returns(null as IQueryExecutionMetrics);
            parentContext.Logger.Returns(null as IGraphEventLogger);
            parentContext.Messages.Returns(_messageCollection);
            parentContext.IsValid.Returns(_messageCollection.IsSucessful);
            parentContext.Session.Returns(new QuerySession());
            return parentContext;
        }

        /// <summary>
        /// Creates an authorization context to validate the field request this builder is creating.
        /// </summary>
        /// <returns>GraphFieldAuthorizationContext.</returns>
        public SchemaItemSecurityChallengeContext CreateSecurityContext()
        {
            var parent = this.CreateFakeParentMiddlewareContext();

            var request = new SchemaItemSecurityRequest(this.FieldRequest);
            return new SchemaItemSecurityChallengeContext(
                parent,
                request);
        }

        /// <summary>
        /// Creates this instance.
        /// </summary>
        /// <returns>GraphFieldExecutionContext.</returns>
        public GraphFieldExecutionContext CreateExecutionContext()
        {
            return new GraphFieldExecutionContext(
                this.CreateFakeParentMiddlewareContext(),
                this.FieldRequest,
                ResolvedVariableCollectionFactory.Create());
        }

        /// <summary>
        /// Creates the resolution context capable of being acted on directly by a resolver, as opposed to being
        /// processed through a pipeline.
        /// </summary>
        /// <returns>FieldResolutionContext.</returns>
        public FieldResolutionContext CreateResolutionContext()
        {
            var context = this.CreateExecutionContext();

            ExecutionArgumentGenerator.TryConvert(
                context.InvocationContext.Arguments,
                context.VariableData,
                context.Messages,
                out var executionArguments);

            executionArguments = executionArguments.ForContext(context);

            return new FieldResolutionContext(
                _schema,
                this.CreateFakeParentMiddlewareContext(),
                this.FieldRequest,
                executionArguments);
        }

        /// <summary>
        /// Gets a reference to the field request to be contained in the context.
        /// </summary>
        /// <value>The field request.</value>
        public IGraphFieldRequest FieldRequest => _mockRequest;

        /// <summary>
        /// Gets or sets the service provider used in all created contexts.
        /// </summary>
        /// <value>The service provider.</value>
        public IServiceProvider ServiceProvider { get; set; }

        /// <summary>
        /// Gets a mock reference to the root method that will be resonsible for resolving the context in case any direct
        /// invocation tests are needed. Otherwise, this property is not used in resolving a context put directly
        /// against the testserver.
        /// </summary>
        /// <value>The graph method.</value>
        public IGraphFieldResolverMethod GraphMethod { get; }
    }
}